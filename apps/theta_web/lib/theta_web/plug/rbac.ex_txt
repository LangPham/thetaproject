defmodule ThetaWeb.Plug.Rbac do
  use Plug.Builder

  def init(opts) do
    #    config = Application.get_all_env(:plug_rbac)
    #    IO.inspect config, label: "CONFIG INIT====\n"
    Keyword.merge(Application.get_all_env(:plug_rbac), opts)
  end

  def call(conn, opts) do
    # Todo: get role
    role = :admin
    config = opts
    IO.inspect config, label: "CONFIG INIT"

    policy = config[:policy]
    effect = config[:effect] == :allow
    req = Phoenix.Router.route_info(ThetaWeb.Router, conn.method, conn.request_path, conn.host)

    #    IO.inspect config[:effect], label: "Effect==============\n"
    #    IO.inspect config[:policy], label: "Policy==============\n"
    #    IO.inspect req, label: "Request==============\n"

    case {effect, Map.has_key?(policy, role)} do
      {true, true} ->
        # Allow have policy => check
        matchers(conn, req, policy[role], effect)
      {true, false} ->
        # Allow not policy => not permission
        error_403(conn)
      {false, true} ->
        # Deny have policy => check
        matchers(conn, req, policy[role], effect)
      {_, _} ->
        # Deny not policy => ok
        conn
    end
  end

  defp matchers(conn, req, policy, effect) do
    check =
      case Map.has_key?(policy, :*) do
        true -> true
        _ ->
          regex = create_regex(policy[req.plug])
          Regex.match?(regex, "#{req.plug_opts}")
      end

    case effect == check do
      true -> conn
      _ -> error_403(conn)
    end
  end

  defp error_403(conn) do
    conn
    |> put_status(403)
    |> send_resp(403, "Unauthorized")
    |> halt
  end

  defp create_regex(action) when is_list(action) do
    ~r/#{~s/(#{Enum.join(action, "|")})/}/
  end
  defp create_regex(action) when is_atom(action) do
    case action do
      :* -> ~r//
      atom -> ~r/#{atom}/
    end
  end
  defp create_regex(action), do: ~r//
end
